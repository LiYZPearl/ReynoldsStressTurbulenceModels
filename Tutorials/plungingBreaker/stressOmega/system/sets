/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    location        system;
    object          sampleDict;
}


// Library to my turbulence models
//libs ("libmyIncompressibleRASModels.so");

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
type sets;
libs    ("libsampling.so");
// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//      stl         : ascii stl. Does not contain values!
surfaceFormat raw;

// interpolationScheme. choice of
//	cell          : use cell-centre value only; constant over cells (default)
//	cellPoint     : use cell-centre and vertex values
//	cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPointFace;

// Fields to sample.
// I have only got the following fields to output: p, U, k, omega
fields
(
k
epsilon
omega
nut
U
alpha.water
R
 /*
    Ux
    k
    omega
    sigmaxy
    wallShearStress
 */
);


// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(


	Vertline0
	{
		type	face;
		axis	xyz;
		start	(-0.565 -0.4 0.05);
		end	(-0.565 0.4 0.05);
		nPoints 100;
	}

	Vertline1
	{
		type	face;
		axis	xyz;
		start	(7.995 -0.4 0.05);
		end	(7.995  0.4 0.05);
		nPoints 100;
	}

	Vertline2
	{
		type	face;
		axis	xyz;
		start	(8.495 -0.4 0.05);
		end	(8.495 0.4 0.05);
		nPoints 100;
	}
 
	Vertline3
	{
		type	face;
		axis	xyz;
		start	(9.045 -0.4 0.05);
		end	(9.045 0.4 0.05);
		nPoints 100;
	}

	Vertline4
	{
		type	face;
		axis	xyz;
		start	(9.495 -0.4 0.05);
		end	(9.495 0.4 0.05);
		nPoints 100;
	}
 
	Vertline5
	{
		type	face;
		axis	xyz;
		start	(9.995 -0.4 0.05);
		end	(9.995 0.4 0.05);
		nPoints 100;
	}
 
	Vertline6
	{
		type	face;
		axis	xyz;
		start	(10.495 -0.4 0.05);
		end	(10.495 0.4 0.05);
		nPoints 100;
	}
 
	Vertline7
	{
		type	face;
		axis	xyz;
		start	(11.095 -0.4 0.05);
		end	(11.095 0.4 0.05);
		nPoints 100;
	}

   /* lineVert
    {
        type        face;
        axis        xyz;
        start       (0.0 0.0 0.0);
        end         (0.0 1.0 0.0);
     }

    //    lineHoriz
    //{
    //    type        face;
    //    axis        xyz;
    //    start       (-10.0 0.0 0.0);
    //    end         ( 10.0 0.0 0.0);
    // }*/
    
);


// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] planes are triangulated by default
// 2] patches are not triangulated by default
surfaces
(
 
 /*   plane
    {
        type            plane;
        basePoint       (0 0 0.05);
        normalVector    (0 0 1);
        interpolate     false;
        //- Optional: restrict to a particular zone
        // zoneName        zone1;

        // Optional: whether to leave as faces or triangulate (=default)
     //   triangulate     false;
    }
*/
 );



// *********************************************************************** //
